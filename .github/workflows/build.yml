name: "Build"

on:
  pull_request:
    branches:
      - dev
      - test
      - master
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (leave empty to use pubspec.yaml version)'
        required: false
        type: string
      release_token:
        description: 'Release token (leave empty for auto-generated token)'
        required: false
        type: string
      deploy_to_pages:
        description: 'Deploy web build to GitHub Pages'
        required: false
        default: true
        type: boolean

jobs:  
  # Main build job for mobile, web, and macOS
  build-main:      
    name: Build Mobile, Web & macOS
    runs-on: macos-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    outputs:
      version: ${{ steps.determine_version.outputs.version }}
      release_token: ${{ steps.generate_token.outputs.release_token }}

    steps:
        #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

        #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v4.7.0
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: 'gradle'

        #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
          cache: true

        #4 Cache Pub Dependencies
      - name: Cache Pub Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool/
            build/
            ~/.pub-cache/
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

        #5 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

        #6 Setup Keystore (for Android builds)
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
        
       #7 Building APK
      - name: Build APK
        run: flutter build apk --release

        #8 Building App Bundle (aab)
      - name: Build appBundle
        run: flutter build appbundle

        #9 Build IPA (iOS Build)
      - name: Build IPA
        run: flutter build ipa --no-codesign

        #10 Build Web
      - name: Build Web
        run: flutter build web --release --web-renderer html

        #10.5 Fix macOS Build Configuration
      - name: Fix macOS Build Configuration
        run: |
          # Create or update Podfile with correct deployment target
          cat > macos/Podfile << 'EOF'
          platform :osx, '10.15'

          target 'Runner' do
            use_frameworks!
            use_modular_headers!

            flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_macos_build_settings(target)
              
              target.build_configurations.each do |config|
                config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '10.15'
              end
            end
          end
          EOF

        #11 Build macOS Desktop
      - name: Build macOS Desktop
        run: |
          flutter config --enable-macos-desktop
          
          # Fix macOS deployment target in project files
          if [ -f "macos/Podfile" ]; then
            # Update Podfile if it exists
            sed -i '' "s/platform :osx, '[0-9.]*'/platform :osx, '10.15'/g" macos/Podfile || true
          fi
          
          # Set deployment target environment variable
          export MACOSX_DEPLOYMENT_TARGET=10.15
          
          # Clean and rebuild to apply changes
          flutter clean
          flutter pub get
          cd macos && pod install --repo-update && cd ..
          flutter build macos --release

      - name: Compress Archives
        run: |
          cd build
          # Compress iOS build
          tar -czf ios_build.tar.gz ios
          
          # Compress Web build
          tar -czf web_build.tar.gz web
          
          # Compress macOS build
          if [ -d "macos" ]; then
            tar -czf macos_build.tar.gz macos
          fi
          
        #12 Upload Artifacts
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: APK-Release
          path: build/app/outputs/flutter-apk/app-release.apk
          
      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: AAB-Release
          path: build/app/outputs/bundle/release/app-release.aab
          
      - name: Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          path: build/ios_build.tar.gz

      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: Web-Build
          path: build/web_build.tar.gz

      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        if: hashFiles('build/macos_build.tar.gz') != ''
        with:
          name: macOS-Build
          path: build/macos_build.tar.gz
          
        #13 Setup Pages (for web deployment)
      - name: Setup Pages
        if: github.event.inputs.deploy_to_pages == 'true' || github.event_name != 'workflow_dispatch'
        uses: actions/configure-pages@v4
        
      - name: Upload Web to Pages
        if: github.event.inputs.deploy_to_pages == 'true' || github.event_name != 'workflow_dispatch'
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web
          
        #14 Extract or Use Custom Version
      - name: Determine Version
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.release_version }}" ]; then
            version="${{ github.event.inputs.release_version }}"
            echo "Using custom version: $version"
          else
            version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
            echo "Using pubspec.yaml version: $version"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV
          
        #15 Generate Release Token
      - name: Generate Release Token
        id: generate_token
        run: |
          if [ -n "${{ github.event.inputs.release_token }}" ]; then
            release_token="${{ github.event.inputs.release_token }}"
            echo "Using custom release token"
          else
            # Generate a random token based on timestamp and run number
            release_token="release-$(date +%s)-${{ github.run_number }}-$(openssl rand -hex 4)"
            echo "Generated random release token: $release_token"
          fi
          echo "release_token=$release_token" >> $GITHUB_OUTPUT
          echo "RELEASE_TOKEN=$release_token" >> $GITHUB_ENV

  # Linux build job
  build-linux:
    name: Build Linux Desktop
    runs-on: ubuntu-latest
    needs: build-main

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
          cache: true

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Linux Desktop
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release

      - name: Compress Linux Build
        run: |
          cd build
          tar -czf linux_build.tar.gz linux

      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Build
          path: build/linux_build.tar.gz

  # Windows build job
  build-windows:
    name: Build Windows Desktop
    runs-on: windows-latest
    needs: build-main

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.4'
          channel: 'stable'
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Windows Desktop
        run: |
          flutter config --enable-windows-desktop
          flutter build windows --release

      - name: Compress Windows Build
        run: |
          cd build
          Compress-Archive -Path windows -DestinationPath windows_build.zip

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Build
          path: build/windows_build.zip

  # Release job that depends on all build jobs
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-main, build-linux, build-windows]
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ needs.build-main.outputs.version }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            echo "Tag v${{ needs.build-main.outputs.version }} already exists"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "Tag v${{ needs.build-main.outputs.version }} does not exist"
          fi
          
      - name: Modify Tag if it Exists
        if: env.TAG_EXISTS == 'true'
        run: |
          new_version="${{ needs.build-main.outputs.version }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "Modified version to: $new_version"
        
      - name: Set Final Version
        if: env.TAG_EXISTS == 'false'
        run: |
          echo "VERSION=${{ needs.build-main.outputs.version }}" >> $GITHUB_ENV

      - name: Prepare Release Artifacts
        run: |
          mkdir -p release_artifacts
          
          # Copy mobile builds
          cp artifacts/APK-Release/app-release.apk release_artifacts/
          cp artifacts/AAB-Release/app-release.aab release_artifacts/
          cp artifacts/iOS-Build/ios_build.tar.gz release_artifacts/
          
          # Copy web build
          cp artifacts/Web-Build/web_build.tar.gz release_artifacts/
          
          # Copy desktop builds
          if [ -f "artifacts/macOS-Build/macos_build.tar.gz" ]; then
            cp artifacts/macOS-Build/macos_build.tar.gz release_artifacts/
          fi
          
          if [ -f "artifacts/Linux-Build/linux_build.tar.gz" ]; then
            cp artifacts/Linux-Build/linux_build.tar.gz release_artifacts/
          fi
          
          if [ -f "artifacts/Windows-Build/windows_build.zip" ]; then
            cp artifacts/Windows-Build/windows_build.zip release_artifacts/
          fi
          
          # List all artifacts
          echo "Release artifacts:"
          ls -la release_artifacts/
        
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release_artifacts/*"
          tag: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          body: |
            ## Release v${{ env.VERSION }}
            
            **Build Information:**
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Release Token: ${{ needs.build-main.outputs.release_token }}
            
            **Available Builds:**
            - 📱 Android APK (`app-release.apk`)
            - 📱 Android App Bundle (`app-release.aab`)
            - 🍎 iOS Build (`ios_build.tar.gz`) - unsigned IPA
            - 🌐 Web Build (`web_build.tar.gz`)
            - 🍎 macOS Build (`macos_build.tar.gz`) - if available
            - 🐧 Linux Build (`linux_build.tar.gz`)
            - 🪟 Windows Build (`windows_build.zip`)
            
            **Web App:** Available at GitHub Pages (if deployed)
            
            **Installation Notes:**
            - **Android**: Install the APK directly or use the AAB for Play Store
            - **iOS**: Requires code signing before installation
            - **Web**: Extract and serve the web build or use GitHub Pages
            - **Desktop**: Extract the archive and run the executable
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

  # Separate job for GitHub Pages deployment
  deploy-pages:
    if: github.event.inputs.deploy_to_pages == 'true' || github.event_name != 'workflow_dispatch'
    needs: build-main
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
